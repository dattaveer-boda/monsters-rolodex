{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","m","SearchBox","placeholder","handleChange","type","onChange","e","App","setState","searchString","target","value","state","fetch","then","response","json","data","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCDbC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAAiBR,QAASQ,GAAfA,EAAEP,W,MCPV,SAASQ,EAAT,GAAiD,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC5C,OACI,uBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAU,SAACC,GAAD,OAAOH,EAAaG,M,UCoCzBC,E,kDArCb,aAAe,IAAD,8BACZ,gBAcFJ,aAAe,SAACG,GACd,EAAKE,SAAS,CAAEC,aAAcH,EAAEI,OAAOC,SAdvC,EAAKC,MAAQ,CACXd,SAAU,GACVW,aAAc,IAJJ,E,qDAQd,WAAqB,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAO9C,WAAU,IAAD,EAC4BC,KAAKN,MAAhCd,EADD,EACCA,SAAUW,EADX,EACWA,aACZU,EAAmBrB,EAASsB,QAAO,SAACpB,GAAD,OACvCA,EAAEL,KAAK0B,cAAcC,SAASb,EAAaY,kBAE7C,OACE,sBAAK/B,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,8BACA,cAACW,EAAD,CACEC,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUL,SAAUqB,W,GAhCVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5aca4d8b.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n        <h1>{props.monster.name}</h1>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\n\nimport {Card} from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n    <div className=\"card-list\">\n        {props.monsters.map((m) => (\n            <Card key={m.id} monster={m} />\n        ))}\n    </div>\n)\n","import './search-box.styles.css';\n\nexport default function SearchBox({placeholder, handleChange}) {\n    return (\n        <input\n          className=\"search\"\n          type=\"search\"\n          placeholder={placeholder}\n          onChange={(e) => handleChange(e)}\n        />\n    )\n}","import React, { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchString: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // called initially\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((data) => this.setState({ monsters: data }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchString: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchString } = this.state;\n    const filteredMonsters = monsters.filter((m) =>\n      m.name.toLowerCase().includes(searchString.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1 className=\"header\">MONSTERS ROLODEX</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}